#!/usr/bin/env escript
%% -*- erlang -*-
%%! verbose

%% CDDL HEADER START
%% -----------------------------------------------------------------------
%% The contents of this file are subject to the Common Development and 
%% Distribution License, Version 1.0 (the "License"); you may not use 
%% this file except in compliance with the License.  You should have 
%% received a copy of the Common Development and Distribution License 
%% along with this software.  If not, it can be retrieved online at 
%% http://www.opensource.org/licenses/CDDL-1.0
%%
%% Software distributed under the License is distributed on an "AS IS"
%% basis, WITHOUT WARRANTY OF ANY KIND, either express or implied.  See
%% the License for the specific language governing rights and limitations
%% under the License.
%%
%% When distributing Covered Code, include this CDDL Header Notice in
%% each file and include the License file at CDDL-LICENSE.  If applicable
%% add the following below the CDDL Header, with the fields enclosed
%% by brackets replaced by your own identifying information:
%% "Portions Copyright [year] [name of copyright owner]"
%%
%% Copyright 2012 Beads D. Land-Trujillo.  All Rights Reserved
%% -----------------------------------------------------------------------
%% CDDL HEADER END

main(_Arg) ->
	Src = filename:absname("src"),
	{ok, Listing} = file:list_dir(Src),
	review(Src, Listing).
	
review(_Dir, []) -> ok;
review(Dir, [Head | Tail]) ->
	{ok, MP} = re:compile("\.erl$"),
	case re:run(Head, MP, [{capture, none}]) of
		nomatch	-> review(Dir, Tail);
		match	-> test_lines(Dir, Head), review(Dir, Tail)
	end.
	
test_lines(Dir, File) ->
	{ok, FileID} = file:open(Dir ++ "/" ++ File, [read]),
	{ok, MP} = re:compile("^(.*)\.erl$"),
	{match, [Module]} = re:run(File, MP, [{capture, [1], list}]),
	{Max, Total, BigFunc, _CurFunc} = line_info(FileID),
	if Max > 78 ->
			io:format("~s: avoid long lines (~p char line detected)~n", 
					[Module, Max]);
	   Total > 380 ->
	   		io:format("~s: avoid long modules (~p lines detected)~n",
	   				[Module, Total]);
	   BigFunc > 18 ->
	   		io:format("~s: avoid long functions (~p line function detected)~n", 
	   				[Module, BigFunc]);
	   true -> false
	end.
	
line_info(FileID) ->
	case file:read_line(FileID) of
		eof			-> {0, 0, 0, 0};
		{ok, Line} 	-> {Max, Total, BigFunc, CurFunc} = line_info(FileID),
					   NewMax = max(string:len(Line), Max),
					   NewTotal = Total + 1,
					   NewCurFunc = function_length(CurFunc, Line),
					   NewBigFunc = max(BigFunc, NewCurFunc), 
					   {NewMax, NewTotal, NewBigFunc, NewCurFunc}
	end.
	
function_length(Count, Line) ->
	{ok, MP} = re:compile("^[^\\%]+\\.\\ *$"),
	case re:run(Line, MP, [{capture, none}]) of
		match	-> 1;
		nomatch -> case Line of
						[$%, $% | _More]	-> Count;
						"\n"				-> Count;
						_Else				-> Count + 1
				   end
	end.
