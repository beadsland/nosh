#!/usr/bin/env escript
%% -*- erlang -*-
%%! verbose

%% CDDL HEADER START
%% -----------------------------------------------------------------------
%% The contents of this file are subject to the Common Development and 
%% Distribution License, Version 1.0 (the "License"); you may not use 
%% this file except in compliance with the License.  You should have 
%% received a copy of the Common Development and Distribution License 
%% along with this software.  If not, it can be retrieved online at 
%% http://www.opensource.org/licenses/CDDL-1.0
%%
%% Software distributed under the License is distributed on an "AS IS"
%% basis, WITHOUT WARRANTY OF ANY KIND, either express or implied.  See
%% the License for the specific language governing rights and limitations
%% under the License.
%%
%% When distributing Covered Code, include this CDDL Header Notice in
%% each file and include the License file at CDDL-LICENSE.  If applicable
%% add the following below the CDDL Header, with the fields enclosed
%% by brackets replaced by your own identifying information:
%% "Portions Copyright [year] [name of copyright owner]"
%%
%% Copyright 2012 Beads D. Land-Trujillo.  All Rights Reserved
%% -----------------------------------------------------------------------
%% CDDL HEADER END

% cygwin/Win invocation (sh):  escript $(cygpath -wa `which mddoc`)

version() -> "0.1.3".

main(_Words) ->
	io:format("Running mddoc ~s github README generator~n", [version()]),
	
	Pwd = filename:absname(""),
	code:add_path(Pwd ++ "/ebin"),
	code:add_path(Pwd ++ "/deps/edown/ebin"),
%	code:add_path(Pwd ++ "/../edown/ebin"),

	get_git_origin(),
	halt(),

	Param = [{doclet, edown_doclet}, 
	         {top_level_readme, {"./README.md", "http://github.com/beadsland/nosh"}}
	        ],
	        
	edoc:application(nosh, Param).
	
get_git_origin() ->
	Git = os:cmd("git remote show origin"),
	Lines = string:tokens(Git, "\n"),
	{ok, MP} = re:compile("^\s+Fetch URL\:.*"),
	 
	Pred = fun(T) -> 
		case re:run(T, MP) of {match,_} -> true; nomatch -> false end
	end,
	Fetch = lists:filter(Pred, Lines),
	io:format("Fetch: ~s~n", [Fetch]).
