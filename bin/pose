#!/usr/bin/env escript
%% -*- erlang -*-
%%! -deps dev
main(Param) ->
    process_flag(trap_exit, true),

    % application directories
    BinDir = filename:absname(filename:dirname(escript:script_name())),
    AppDir = filename:absname_join(BinDir, ".."),
    DepsDir = filename:absname_join(AppDir, "dev"),

    % get situated
    file:set_cwd(AppDir),
    compile_pose(DepsDir),
    main(Param, [gen_command, pose]).

main(Param, []) -> pose:start(Param);
main(Param, [Head | Tail]) ->
    pose_command:load_command(Head),
    main(Param, Tail).

compile_pose(DepsDir) ->
    PoseEbinDir = filename:join(DepsDir, "pose/ebin"),
    PoseSrcDir = filename:join(DepsDir, "pose/src"),

    code:add_pathz(PoseEbinDir),

    WildCard = filelib:wildcard("*.erl", PoseSrcDir),
    {ok, MP} = re:compile("\\.erl\$"),
    Opts = [{return, list}],
    Modules = [re:replace(X, MP, "", Opts) || X <- WildCard],
    compile_app(DepsDir, PoseEbinDir, PoseSrcDir, Modules).

compile_app(_DepsDir, _PoseEbinDir, _PoseSrcDir, []) -> true;
compile_app(DepsDir, PoseEbinDir, PoseSrcDir, [Head | Tail]) ->
    PoseEbinFile = lists:append(Head, ".beam"),
    case filelib:is_file(filename:join(PoseEbinDir, PoseEbinFile)) of
        false -> compile(DepsDir, PoseEbinDir, PoseSrcDir, Head);
        true  -> false
    end,
    compile_app(DepsDir, PoseEbinDir, PoseSrcDir, Tail).

compile(DepsDir, PoseEbinDir, PoseSrcDir, ModuleName) ->
    PoseSrcFile = lists:append(ModuleName, ".erl"),

    Options = [verbose, warnings_as_errors, return_errors,
               {outdir, PoseEbinDir}, {i, DepsDir}],
    compile:file(filename:join(PoseSrcDir, PoseSrcFile), Options).