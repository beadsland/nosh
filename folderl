#!/usr/bin/env escript
%% -*- erlang -*-
%%!

-include("deps/pose/include/interface.hrl").

-export([do_run/2]).

main(Param) ->
  gen_command:start(Param, ?MODULE).

do_run(IO, _ARG) ->
  Command = charin,
  case gen_command:load_command(IO, Command) of
    {module, Module}    ->
      CharPid = spawn_link(Module, run, [?IO(self()), ?ARG(charin), ?ENV]),
      loop(?IO(CharPid), 80, "", 0);
    {error, What}       ->
      exit({Command, What})
  end.

loop(IO, Cols, String, Count) when Count == Cols ->
  {ok, MP} = re:compile("^(.*[\\ \\,])([^\\ \\,]*)\$"),
  case re:run(String, MP, [{capture, [1,2], list}]) of
    nomatch                 -> io:format("~s~n", [String]),
                               loop(IO, Cols, "", 0);
    {match, [Above, Below]} -> io:format("~s~n", [Above]),
                               NewString = lists:append("   ", Below),
                               loop(IO, Cols, NewString, length(NewString))
  end;

loop(IO, Cols, String, Count) ->
  receive
    {purging, _Pid, _Mod}                               ->
      loop(IO, Cols, String, Count);
    {'EXIT', Stdin, Reason} when Stdin == IO#std.in     ->
      exit(Reason);
    {stdout, Stdout, "\n"} when Stdout == IO#std.out    ->
      io:format("~s~n", [String]),
      loop(IO, Cols, "", 0);
    {stdout, Stdout, Count} when Stdout == IO#std.out   ->
      loop(IO, Cols, lists:append(String, Count), Count + 1);
    {stderr, Stderr, What} when Stderr == IO#std.err    ->
      io:format(standard_error, "~s", What);
    Noise                                               ->
      ?STDERR("noise: ~p ~p~n", [Noise, self()])
  after
    100 -> io:format("~s", [String]),
           loop(IO, Cols, "", Count)
  end.